{"version":3,"sources":["webpack:///sw-install.js","webpack:///webpack/bootstrap 1fe87067036c981b0103?2d96","webpack:///(webpack)/buildin/global.js?3698","webpack:///./~/babel-runtime/regenerator/index.js?1e6f","webpack:///./~/regenerator-runtime/runtime-module.js?db42","webpack:///./~/regenerator-runtime/runtime.js?1aab","webpack:///./src/sw-install.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","g","this","Function","eval","e","window","global","self","hadRuntime","regeneratorRuntime","getOwnPropertyNames","indexOf","oldRuntime","undefined","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","makeInvokeMethod","tryCatch","fn","obj","arg","type","err","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","forEach","method","AsyncIterator","invoke","resolve","reject","record","result","hasOwn","Promise","__await","then","unwrapped","enqueue","callInvokeWithMethodAndArg","previousPromise","process","domain","bind","state","GenStateSuspendedStart","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","done","GenStateSuspendedYield","iterator","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","length","Op","$Symbol","Symbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","constructor","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","key","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","__webpack_exports__","_asyncToGenerator","gen","apply","arguments","step","error","confirmUpdate","sw","confirm","postMessage","action","trackInstalling","onstatechange","checkPendingUpdate","reg","updateFound","waiting","installing","initSW","installSW","updateSW","uninstallSW","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default","_ref","a","_callee","_context","navigator","serviceWorker","controller","register","alert","t0","console","_ref2","_callee2","_context2","getRegistration","update","_ref3","_callee3","shouldContinue","didUnregister","_context3","unregister","location","reload","_ref4","_callee4","_context4","oncontrollerchange","isLoaded","addEventListener","onupdatefound"],"mappings":"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","file":"sw-install.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 4);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(2);\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g =\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this;\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(3);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    if (typeof global.process === \"object\" && global.process.domain) {\n      invoke = global.process.domain.bind(invoke);\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ }),\n/* 4 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initSW\", function() { return initSW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"installSW\", function() { return installSW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateSW\", function() { return updateSW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"uninstallSW\", function() { return uninstallSW; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__);\n\n\nvar installSW = function () {\n  var _ref = _asyncToGenerator(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee() {\n    var reg, sw;\n    return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(navigator.serviceWorker.controller !== null)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt('return');\n\n          case 2:\n            _context.prev = 2;\n            _context.next = 5;\n            return navigator.serviceWorker.register('./sw.js');\n\n          case 5:\n            reg = _context.sent;\n            sw = reg.installing;\n\n            if (!(sw === null)) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt('return');\n\n          case 9:\n\n            sw.onstatechange = function () {\n              if (sw.state === 'activated') {\n                alert('App installed');\n                sw.postMessage({ action: 'control' });\n              }\n            };\n            _context.next = 16;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context['catch'](2);\n\n            console.error(_context.t0);\n            alert('Install failed');\n\n          case 16:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[2, 12]]);\n  }));\n\n  return function installSW() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar updateSW = function () {\n  var _ref2 = _asyncToGenerator(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee2() {\n    var reg, updateFound;\n    return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(navigator.serviceWorker.controller === null)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt('return');\n\n          case 2:\n            _context2.prev = 2;\n            _context2.next = 5;\n            return navigator.serviceWorker.getRegistration();\n\n          case 5:\n            reg = _context2.sent;\n            updateFound = checkPendingUpdate(reg);\n\n            if (updateFound === false) {\n              reg.update();\n            }\n            _context2.next = 14;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2['catch'](2);\n\n            console.error(_context2.t0);\n            alert('Update failed');\n\n          case 14:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this, [[2, 10]]);\n  }));\n\n  return function updateSW() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar uninstallSW = function () {\n  var _ref3 = _asyncToGenerator(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee3() {\n    var shouldContinue, reg, didUnregister;\n    return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(navigator.serviceWorker.controller === null)) {\n              _context3.next = 2;\n              break;\n            }\n\n            return _context3.abrupt('return');\n\n          case 2:\n            shouldContinue = window.confirm('Uninstall?');\n\n            if (!(shouldContinue === false)) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt('return');\n\n          case 5:\n            _context3.prev = 5;\n            _context3.next = 8;\n            return navigator.serviceWorker.getRegistration();\n\n          case 8:\n            reg = _context3.sent;\n            _context3.next = 11;\n            return reg.unregister();\n\n          case 11:\n            didUnregister = _context3.sent;\n\n            if (didUnregister) {\n              alert('Uninstalled');\n              window.location.reload();\n            }\n            _context3.next = 19;\n            break;\n\n          case 15:\n            _context3.prev = 15;\n            _context3.t0 = _context3['catch'](5);\n\n            console.error(_context3.t0);\n            alert('Uninstall failed');\n\n          case 19:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this, [[5, 15]]);\n  }));\n\n  return function uninstallSW() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar initSW = function () {\n  var _ref4 = _asyncToGenerator(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee4() {\n    var reg;\n    return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!(navigator.serviceWorker === undefined)) {\n              _context4.next = 2;\n              break;\n            }\n\n            return _context4.abrupt('return');\n\n          case 2:\n\n            navigator.serviceWorker.oncontrollerchange = function () {\n              return window.location.reload();\n            };\n\n            if (!(navigator.serviceWorker.controller === null)) {\n              _context4.next = 9;\n              break;\n            }\n\n            if (!window.isLoaded) {\n              _context4.next = 7;\n              break;\n            }\n\n            installSW();\n            return _context4.abrupt('return');\n\n          case 7:\n\n            window.addEventListener('load', installSW);\n            return _context4.abrupt('return');\n\n          case 9:\n            _context4.prev = 9;\n            _context4.next = 12;\n            return navigator.serviceWorker.getRegistration();\n\n          case 12:\n            reg = _context4.sent;\n\n            checkPendingUpdate(reg);\n            reg.onupdatefound = function () {\n              return trackInstalling(reg.installing);\n            };\n            _context4.next = 21;\n            break;\n\n          case 17:\n            _context4.prev = 17;\n            _context4.t0 = _context4['catch'](9);\n\n            console.error(_context4.t0);\n            alert('Something failed');\n\n          case 21:\n          case 'end':\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this, [[9, 17]]);\n  }));\n\n  return function initSW() {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction confirmUpdate(sw) {\n  var shouldContinue = window.confirm('Update ready\\nContinue?');\n\n  if (shouldContinue) {\n    sw.postMessage({ action: 'skipWaiting' });\n  }\n}\n\nfunction trackInstalling(sw) {\n  sw.onstatechange = function () {\n    if (sw.state === 'installed') {\n      confirmUpdate(sw);\n    }\n  };\n}\n\nfunction checkPendingUpdate(reg) {\n  var updateFound = false;\n\n  if (reg.waiting) {\n    confirmUpdate(reg.waiting);\n    updateFound = true;\n  }\n\n  if (reg.installing) {\n    trackInstalling(reg.installing);\n    updateFound = true;\n  }\n\n  return updateFound;\n}\n\ninitSW();\n\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// sw-install.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1fe87067036c981b0103","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 0\n// module chunks = 0 1","module.exports = require(\"regenerator-runtime\");\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/babel-runtime/regenerator/index.js\n// module id = 1\n// module chunks = 0 1","// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g =\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this;\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/regenerator-runtime/runtime-module.js\n// module id = 2\n// module chunks = 0 1","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    if (typeof global.process === \"object\" && global.process.domain) {\n      invoke = global.process.domain.bind(invoke);\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/regenerator-runtime/runtime.js\n// module id = 3\n// module chunks = 0 1","function confirmUpdate(sw) {\n  const shouldContinue = window.confirm('Update ready\\nContinue?');\n\n  if (shouldContinue) {\n    sw.postMessage({ action: 'skipWaiting' });\n  }\n}\n\nfunction trackInstalling(sw) {\n  sw.onstatechange = () => {\n    if (sw.state === 'installed') {\n      confirmUpdate(sw);\n    }\n  };\n}\n\nfunction checkPendingUpdate(reg) {\n  let updateFound = false;\n\n  if (reg.waiting) {\n    confirmUpdate(reg.waiting);\n    updateFound = true;\n  }\n\n  if (reg.installing) {\n    trackInstalling(reg.installing);\n    updateFound = true;\n  }\n\n  return updateFound;\n}\n\nasync function installSW() {\n  if (navigator.serviceWorker.controller !== null) {\n    return;\n  }\n\n  try {\n    const reg = await navigator.serviceWorker.register('./sw.js');\n    const sw = reg.installing;\n\n    if (sw === null) {\n      return;\n    }\n\n    sw.onstatechange = () => {\n      if (sw.state === 'activated') {\n        alert('App installed');\n        sw.postMessage({ action: 'control' });\n      }\n    };\n  } catch (err) {\n    console.error(err);\n    alert('Install failed');\n  }\n}\n\nasync function updateSW() {\n  if (navigator.serviceWorker.controller === null) {\n    return;\n  }\n\n  try {\n    const reg = await navigator.serviceWorker.getRegistration();\n    const updateFound = checkPendingUpdate(reg);\n    if (updateFound === false) {\n      reg.update();\n    }\n  } catch (err) {\n    console.error(err);\n    alert('Update failed');\n  }\n}\n\nasync function uninstallSW() {\n  if (navigator.serviceWorker.controller === null) {\n    return;\n  }\n\n  const shouldContinue = window.confirm('Uninstall?');\n\n  if (shouldContinue === false) {\n    return;\n  }\n\n  try {\n    const reg = await navigator.serviceWorker.getRegistration();\n    const didUnregister = await reg.unregister();\n    if (didUnregister) {\n      alert('Uninstalled');\n      window.location.reload();\n    }\n  } catch (err) {\n    console.error(err);\n    alert('Uninstall failed');\n  }\n}\n\nasync function initSW() {\n  if (navigator.serviceWorker === undefined) {\n    return;\n  }\n\n  navigator.serviceWorker.oncontrollerchange = () => window.location.reload();\n\n  if (navigator.serviceWorker.controller === null) {\n    if (window.isLoaded) {\n      installSW();\n      return;\n    }\n\n    window.addEventListener('load', installSW);\n    return;\n  }\n\n  try {\n    const reg = await navigator.serviceWorker.getRegistration();\n    checkPendingUpdate(reg);\n    reg.onupdatefound = () => trackInstalling(reg.installing);\n  } catch (err) {\n    console.error(err);\n    alert('Something failed');\n  }\n}\n\ninitSW();\n\nexport {\n  initSW,\n  installSW,\n  updateSW,\n  uninstallSW,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/sw-install.js"],"sourceRoot":""}